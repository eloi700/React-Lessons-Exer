**  FRAGMENTS *****************************************************************
    A common pattern in React is for a component to return multiple elements.
    Fragments let you group a list of children without adding extra nodes to the DOM. Example:
    class Columns extends React.Component {
      render() {
        return (
          <React.Fragment>
            <td>Hello</td>
            <td>World</td>
          </React.Fragment>
        );
      }
    }
    ------------------------------------------------
    **  Short Syntax (Empty Tags) - Latest
    class Columns extends React.Component {
      render() {
        return (
          <>
            <td>Hello</td>
            <td>World</td>
          </>
        );
      }
    }
    You can use <></> the same way you’d use any other element except that it doesn’t support keys or attributes.

**  KEYED FRAGMENTS ********************************************************
    Fragments declared with the explicit <React.Fragment> syntax may have keys. A use case for this is mapping a collection to an array of fragments — for example, to create a description list:

    function Glossary(props) {
      return (
        <dl>
          {props.items.map(item => (
            // Without the `key`, React will fire a key warning
            <React.Fragment key={item.id}>
              <dt>{item.term}</dt>
              <dd>{item.description}</dd>
            </React.Fragment>
          ))}
        </dl>
      );
    }

**  RENDERING LIST OF FRAGMENTS
    Here’s a situation where you need to write Fragment explicitly instead of using the <></> syntax. When you render multiple elements in a loop, you need to assign a key to each element. If the elements within the loop are Fragments, you need to use the normal JSX element syntax in order to provide the key attribute:

    function Blog() {
      return posts.map(post =>
        <Fragment key={post.id}>
          <PostTitle title={post.title} />
          <PostBody body={post.body} />
        </Fragment>
      );
    }

**  STATE **********************************************************
    State is a special property in React Component.  It has an Object that includes any data that this component needs.
    ------------------------------------------------
    **  Difference between STATE and props
    props (short for “properties”) and state are both plain JavaScript objects. While   both hold information that influences the output of render, they are different in one important way:

    props get passed to the component (similar to function parameters) whereas state is managed within the component (similar to variables declared within a function).

**  SETTING ATTRIBUTES *********************************************************
    Example:
    class Counter extends Component {
      state = {
        count: 0,
        imageUrl: 'https://source.unsplash.com/ye6Tk9YTxEQ/200x200',
      };
      render() {
        return (
          <>
            <img src={this.state.imageUrl} alt='plant' />
            <span>{this.formatCount()}</span>
            <button>Increment</button>
          </>
        );
      }

      formatCount() {
        const { count } = this.state;
        // return this.state.count === 0 ? 'Zero': this.state.count; - OR
        return count === 0 ? 'Zero' : count;
      }
    }

    export default Counter;

**  ADDING CLASSES & STYLES ************************************************
    **  Inline / by property
    class Counter extends Component {
      state = {
        count: 0,
      };

      styles = {
        fontSize: 15,
        fontWeight: 'bold',
      };

      render() {
        return (
          <>
            <span style={this.styles} className='badge bg-primary py-2 m-2'>
              {this.formatCount()}
            </span>
            <button style = { {fontSize: 15} }className='btn btn-secondary btn-sm   rounded-pill'>
              Increment
            </button>
          </>
        );
      }

**  RENDERING CLASSES DYNAMICALLY ***************************************
    ** Example:
    let classes = "badge m-2 p-2 bg-";
    classes += this.state.count === 0 ? "warning" : "primary";
    render() {
        return (
            < >
            <span className={ classes }>{this.formatCount()}</span>
            <button className='btn btn-secondary btn-sm rounded-pill'>
              Increment
            </button>
            </ >
        );
    }
    ------------------------------------------------
    **  Rendered / Encapsulated Code into Method Class

        render() {
          return (
            < >
              <span className={this.getBadgeClasses()}>{this.formatCount()}</span>
              <button className='btn btn-secondary btn-sm rounded-pill'>
                Increment
              </button>
            </ >
          );
        }

        getBadgeClasses() {
          let classes = 'badge m-2 p-2 bg-';
          classes += this.state.count === 0 ? 'warning' : 'primary';
          return classes;
        }

**  RENDERING LISTS USING MAP METHOD ***************************************
    **  Whenever Map method is use to enumerate a list - key method must be used.
        class Counter extends Component {
          state = {
            count: 0,
            tags: ["tag1", "tag2", "tag3"],
          };

          render() {
            return (
              <>
                <ul>
                  {this.state.tags.map((tag, index) => (
                    <li key={index}>{tag}</li> // OR
                    // <li key={tag}>{tag}</li> // only tag param in this.state.tag.map()
                  ))}
                </ul>
              </>
            );
          }
        }

**  CONDITIONAL RENDERING *****************************************************
    **  In JSX - use plain old JS
        **  if(this.state.tags.length === 0) return <p>There are no tags!</p>
        renderTags(){
          <div>
            {this.state.tags.length === 0 && "Please create a new tag!}
          </div>
        }
        **  Here in this condition, using &&, it takes truthy / falsy like in JS
            true && false = false
            true && 'Hi' = 'Hi'
            true && 'Hi' && 1 = (3 truthy operands) = 1
            true && 0 && 20 = (true, false, true) = 0(false)
            false && false && 'Hello' = false(the first)
            false && true && false = false

        class Counter extends Component {
          state = {
            count: 0,
            tags: ['tag1', 'tag2', 'tag3'],
          };

          renderTags() {
            if (this.state.tags.length === 0) return <p>There are no tags!</p>;
            // if (this.state.tags.length === 0) return null // if nothing to be returned
            return (
              <ul>
                {this.state.tags.map((tag) => (
                  <li key={tag}>{tag}</li>
                ))}
              </ul>
            );
          }

          render() {
            return <>{this.renderTags()}</>;
          }
        }

        export default Counter;

**  HANDLING EVENTS *********************************************************
    **  Example:
    handleIncrement() {
        console.log('Increment Clicked');
      }

      render() {
        return (
          <div>
            <span className={this.getBadgeClasses()}>{this.formatCount()}</span>
            <button
              onClick={this.handleIncrement}
              className='btn btn-secondary btn-sm rounded-pill'
            >
              Increment
            </button>
          </div>
        );
      }

**  BINDING EVENT HANDLERS ************************************************
    Example: to access / use 'this' using BIND Method
    constructor(){
      super();
      this.handleIncrement = this.handleIncrement.bind(this)
    } // this is only optional otherwise use Arrow Function in handleIncrement()

    handleIncrement=()=>{// BINDED Using Arrow Function
      console.log("Increment Clicked, this);
    }

**  UPDATING THE STATE ******************************************************
    ** Using setState() method and then pass an object. The properties of the obj will be merged with what in the state obj or overwrite those properties. Passing the count property and setting the value into this.state.count+1
    Example:
      handleIncrement = () => {
        this.setState({count: this.state.count + 1});
      }

**  PASSING EVENT HANDLER *****************************************************
    *  Inline function - passing argument
          handleIncrement = product => { // passing argument (product)
            console.log(product);
            this.setState({count: this.state.count + 1});
          }

          render() {
            return (
              <div>
                <span className={this.getBadgeClasses()}>{this.formatCount()}</span>
                <button
                  onClick={() => this.handleIncrement(product)} //passing arrow function
                  className='btn btn-secondary btn-sm rounded-pill'
                >
                  Increment
                </button>
              </div>
            );
          }









