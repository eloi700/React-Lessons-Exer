**  ARROW FUNCTION ***********************************************************
    Example-1:
    const square = function (number){
        return number * number;
    }
    ---------------------------------
    const square = number => number * number
    console.log(square(5)) // 25

    Example-2:
    const jobs = [
        {id: 1, isActive: true},
        {id: 2, isActive: true},
        {id: 3, isActive: false}
    ];
    const activeJobs = jobs.filter(function(job)) {return job.isActive;};
    ----------------------------------
    const activeJobs = jobs.filter(job => job.isActive);

**  ARROW FUNCTION and THIS *************************************************
    Example-1: this ALWAYS refers to the CURRENT OBJECT
    const person = {
        talk(){
            console.log("this", this)
        }
    }
    person.talk()
    * Second this above refers to person object (talk(){})

    Example-2:
    const person = {
        talk(){
            setTimeout(function(){
                console.log("this", this);
            }, 1000)
        }
    };
    person.talk()
    *  Second this returns a Window Object only-this refers to the setTimeout or
       callback funtion
    ----------------------------------
    const person = {
        talk(){
            let self = this;
            setTimeout(()=>{
                console.log("this", this);
            },1000);
        }
    };
    person.talk()

**  ARROW FUNCTION LIMITATIONS *********************************************
    1.) Does not have its own binding to THIS and SUPER.
    2.) Does not have arguments object.
    3.) Not suitable for CALL, APPLY, and BIND Methods
    4.) Can't be used as constructor
    5.) Can't be used yield (in generators), within its body.
    6.) Do not default this to the window scope, rather they EXECUTE in the scope they are created.

    Example: Standard & Arrow Functions
    class PersonName {
        name = "Ella"

        printName(){
            console.log('printName:', this.name) // Ella
        }
        printNameArrowFn = () => {
            console.log('printNameArrowFn:', this.name) //Ella
        }
    }

    const myPersonName = new PersonName();
    myPersonName.printName(); // Ella
    myPersonName.printNameArrowFn(); // Ella (from Parent)

**  ARRAY MAP METHOD ***********************************************************
    Example-1:
    const colors = ['red', 'green', 'blue'];
    const items = colors.map(color =>`<li>${color}</li>`);
    console.log(items);

**  OBJECT DESTRUCTURING ******************************************************
    Example:
    const address = {
        street: '',
        city: '',
        country: ''
    };
    const street = address.street;
    const street = address.city;
    const street = address.country;
    ----------------------------------
    **  Desctructuring above would be:
    const { street, city, country } = address
    ----------------------------------
    **  OR Defining alias (st) to a particular property of the address object
    const { street: st } = address

**  ARRAY DESTRUCTURING ******************************************************
    Example:
    const fruits = [undefined, 'manggo', 'apple', 'strawberry'];
    const [firstFruit = orange, ...otherFruits] = fruits;

    console.log(firstFruit); // orange
    console.log(otherFruits); // object from manggo to strawberry

**  SPREAD OPERATOR ***********************************************************
    Example: Combination of 2 arrays
    const first = [1, 2, 3];
    const second = [4, 5, 6];
    const combined = first.concat(second);
    ----------------------------------
    **  Using Spread Operator to Combine first and second arrays
    const combined = [...first, ...second];
    const combined = [...first, 'a', ...second, 'b']; // with add'l elements
    ----------------------------------
    **  Cloning an Array Using Spread Operator
    const clone = [...second]; // result will be same as const second
    ----------------------------------
    **  Application of Spread Operator into an Object
    const firstName = {name: 'Mosh'};
    const position = {job: 'Developer'};
    const applicant = {...firstName, ...position, location: 'Pennsylvania'}

**  REST PARAMETERS
    Allows to represent an indefinite number of arguments as an Array.
    Example:
    function sum(...theArgs){
        return theArgs.reduce((previous + current)=>{
            return previous + current;
        });
    }
    console.log(sum(1,2,3)); // 6
    ----------------------------------
    Arguments cannot use Array Functions.
    Example:
    function useArguments(a,b){
        console.log(argument[1]); //returns 5
    }
    useArguments(1,5);

**  CLASSES ******************************************************************
    Example: Creating Classes out of repeating Implementation of walk() methods
    const person1 = {
        name: 'Mosh',
        //the method to be repeated
        walk(){
            console.log("walk");
        };
    };
    const person2 = {
        name: 'Mosh',
        //the method to be repeated
        walk(){
            console.log("walk");
        };
    };
    ----------------------------------
    **  Using classes instead of repeating implementation of Methods
        **  BLUE PRINT for Creating Person Object Using Class
        class Person {
            constructor(name){
                this.name = name
                // setting the name to the object & name received from outside
            }
            walk(){
                console.log("walk");
            };
        };
    ----------------------------------
    **  Creating Person Object
        const person = new Person('Mosh') // setting what is in the Const as Arg.
        person.walk();

**  CLASSES IN JS/TYPESCRIPT ***************************************************
    CONSTRUCTOR - executed when you initialize the class
    FUNCTIONS - the method that you can use in the class
    PUBLIC VARIABLES - can be access when you INSTANTIATE the class
    PRIVATE VARIABLES - can only be access inside the class
    STATIC VARIABLES - can be called without the need to instantiate the class
    "this" OBJECT - reference the class itself (refers within the object)
    INHERITANCE - use "EXTENDS" to get the attributes of a parent class
    SUPER - calling base class attributes

**  INHERITANCE *****************************************************************
    Example:
    class Person {
        constructor(name){
            this.name = name
            // setting the name to the object & name received from outside
        }
        walk(){
            console.log("walk");
        };
    };

    class Teacher {
        teach(){
            console.log("teach");
        }
    }
    ----------------------------------
    **  Using EXTENDS to Inherit Walk Method from Person Class
        The teacher should be able to walk.

        class Teacher extends Person {
            constructor(name, degree){
                super(name);
                this.degree = degree;
            }
            teach(){
                console.log("teach");
            }
        }
        const teacher = new Teacher('Mosh', 'MSc');
        teacher.degree; // property
        teacher.name; // property
        teacher.walk(); // method
        teacher.teach(); // method

**  PROMISES & ASYNC + AWAIT ***********************************************
    **  How JS Works?
    1.) JS is a single threaded and has a Synchronous execution module. One command / code is being executed at a time.
    2.) Asynchronous - codes are executed in the background and will give a way for others to be executed (e.g. setTimeout)
    Example:
        let mNum = 5;
        function cN() {
          return new Promise((resolve) => {
            setTimeout(() => {
              resolve(10);
            }, 500);
          });
        }

        async function startChange() {
          mNum = await cN();
          console.log(mNum); // 10
        }
        startChange();


**  MODULES *****************************************************************
    Splitting a code in 1 file into multiple files - modularity. Each file is a module.
    // person.js
    export class Person {
        constructor(name){
            this.name = name
            // setting the name to the object & name received from outside
        }
        walk(){
            console.log("walk");
        };
    };
    ----------------------------------
    //teacher.js
    import { Person } from './person';
    export class Teacher extends Person {
        constructor(name, degree){
            super(name);
            this.degree = degree;
        }
        teach(){
            console.log("teach");
        }
    }
    const teacher = new Teacher('Mosh', 'MSc');
    teacher.walk(); // method
    ----------------------------------
    // index.js
    import { Teacher } from './teacher';
    teacher.teach();

**  NAMED & DEFAULT EXPORTS *****************************************************
    **  Named Exports - Exporting 1 or more objects from a given module.
    **  Default Exports - Use if there's only a SINGLE Obj to be exported.
    **  In JS a Class is also an Obj because JS classes are syntactic sugar over
        constructor functions and functions are technically an object.

    //index.js
    import {Teacher, promote} from "./teacher";
    ----------------------------------
    //teacher.js
    import { Person } from './person';

    export function promote(){};

    export class Teacher extends Person { // also an Obj in JS
        constructor(name, degree){
            super(name);
            this.degree = degree;
        }
        teach(){
            console.log("teach");
        }
    }
    const teacher = new Teacher('Mosh', 'MSc');
    ----------------------------------
    **  Default Exports Example
    //teacher.js
    import { Person } from './person';

    export default class Teacher extends Person {
        constructor(name, degree){
            super(name);
            this.degree = degree;
        }
        teach(){
            console.log("teach");
        }
    }
    const teacher = new Teacher('Mosh', 'MSc');
    teacher.name;
    ----------------------------------
    //index.js ----NOTE: There's no { } when importing the Teacher
    import Teacher from "./teacher";

    const teacher = new Teacher('Mosh', 'MSc');
    teacher.teach();
    ----------------------------------
    **  Another example with a bunch of named & default Exports
    //index.js ----NOTE: There's no { } when importing the Teacher
    import Teacher, { promote } from "./teacher"; OR
    import React, { Component } from 'react';










